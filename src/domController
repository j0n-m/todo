import pubSub from "./pubSub";
import { format, formatDistance, formatRelative, parse, parseISO } from 'date-fns'

const domController = (function () {
  let allProjects = [];
  let activeProject;
  let history;
  // DOM selectors
  const contentContainer = document.querySelector('.content');
  const projectList = document.querySelector('.project-list');
  const projectAddForm = document.querySelector('#project-add-form')
  const newProjectBtn = document.querySelector('.new-project-btn');
  const formContainer = document.querySelector('.form-field');
  const formCancelBtn = document.querySelector('#project-cancel-btn');
  const formTextbox = document.querySelector('#project-title-textbox');
  const errorMsg = document.querySelector('.error-msg');
  const addTaskOverlay = document.querySelector('.addTaskOverlay');
  const closeTaskOverlayBtn = document.querySelector('#closeTaskContainerBtn');
  const addTaskForm = document.querySelector('#addTaskForm');
  const templateOverlay = document.querySelector('.overlay-template')
  const closeTemplateOverlayBtn = document.querySelector('#closeTemplateOverlayBtn');
  const sortAllTasksBtn = document.querySelector('.allTasks');
  // const sortUpcomingTasksBtn = document.querySelector('.upcomingTasks');
  // const sortTodayTasksBtn = document.querySelector('.todayTasks');


  //manual event listener for dynamically created elements
  document.addEventListener('click', function (e) {
    let addTaskBtn = e.target.closest('#addTaskBtn');
    let projectBtn = e.target.closest('.project-btn');
    let taskDeleteBtn = e.target.closest('.taskDeleteBtn');
    let taskDetailsBtn = e.target.closest('.taskDetailsBtn');

    if (addTaskBtn) {
      console.log(getActiveProjectIndex(activeProject))
      toggleAddTaskOverlay();
    }
    if (projectBtn) {
      changeMainContent(e);
    }
    if (taskDeleteBtn) {
      const taskIndex = Number(taskDeleteBtn.dataset['taskindex']);
      const projectIndex = Number(taskDeleteBtn.dataset['projectindex']);
      deleteTaskFromProject(taskIndex, projectIndex);
    }
    if (taskDetailsBtn) {
      const taskIndex = Number(taskDetailsBtn.dataset['taskindex']);
      const projectIndex = Number(taskDetailsBtn.dataset['projectindex']);
      showTaskDetails(taskIndex, projectIndex);
    }
  })

  // Event Handlers
  projectAddForm.addEventListener('submit', projectAdd);
  newProjectBtn.addEventListener('click', toggleProjectAddForm);
  formCancelBtn.addEventListener('click', toggleProjectAddForm);
  closeTaskOverlayBtn.addEventListener('click', toggleAddTaskOverlay)
  addTaskForm.addEventListener('submit', VerifyAddingTask);
  closeTemplateOverlayBtn.addEventListener('click', toggleTemplateOverlay)
  sortAllTasksBtn.addEventListener('click', sortAllTasks);


  //Pubsub
  pubSub.subscribe('addToProjectList', addToProjectList);
  pubSub.subscribe('error-duplicate', displayError)
  pubSub.subscribe('newTask', showTasks);
  pubSub.subscribe('loadHomePage', loadContent);
  pubSub.subscribe('overwriteProjectListing', overwriteAllProjects);

  // Event Functions
  function projectAdd(e) {
    e.preventDefault();
    pubSub.publish('addNewProject', { title: formTextbox.value });
    toggleProjectAddForm();
  }
  function overwriteAllProjects(projectsArr) {
    allProjects = [];
    for (let i = 0; i < projectsArr.length; i++) {
      allProjects.push(projectsArr[i]);
    }
    console.log('overwrite completed')
  }
  function toggleProjectAddForm() {
    formTextbox.value = '';
    formContainer.classList.toggle('hide');
  }
  function toggleAddTaskOverlay() {
    addTaskForm.reset();
    addTaskOverlay.classList.toggle('hide');
  }
  function toggleTemplateOverlay() {
    templateOverlay.classList.toggle('hide')
  }
  function showTasks() {
    if (history) {
      history();
    } else {
      loadContent(getActiveProjectIndex(activeProject));
    }
  }
  function sortAllTasks() {
    history = sortAllTasks;
    console.log('trying to display all tasks...');
    contentContainer.replaceChildren();
    for (let i = 0; i < allProjects.length; i++) {
      displayTilesOnly(allProjects[i].tasks, i);
    }


    //for each iteration of the projects array
    //access the tasks array

    //if dateFilter =='all'
    //-displays all tasks of every project
    //if dueDate == dateFilter
    //-create the dynamic elements and append
    //else if d

  }
  function displayTilesOnly(taskArr, projectIndex) {
    taskArr.forEach((task, i) => {
      const colorTile = document.createElement('div');
      colorTile.classList.add('color-tile', 'priority-' + task.priority);

      const mainTile = document.createElement('div');
      mainTile.classList.add('main-tile');

      const h1Title = document.createElement('h1')
      h1Title.textContent = task.getTitle();

      const rightSide = document.createElement('div')
      rightSide.classList.add('right-side')

      const detailsBtn = document.createElement('div')
      detailsBtn.classList.add('btn', 'taskDetailsBtn')
      detailsBtn.textContent = 'Details';
      detailsBtn.dataset.taskindex = +i;
      detailsBtn.dataset.projectindex = +projectIndex;

      const dueDateText = document.createElement('h3');
      dueDateText.textContent = task.getDueDate();

      const editBtn = document.createElement('div');
      editBtn.classList.add('btn');
      editBtn.textContent = 'Edit';
      editBtn.dataset.taskindex = i;
      editBtn.dataset.projectindex = +projectIndex;

      const deleteTaskBtn = document.createElement('div');
      deleteTaskBtn.classList.add('btn', 'taskDeleteBtn');
      deleteTaskBtn.textContent = 'Delete';
      deleteTaskBtn.dataset.taskindex = i;
      deleteTaskBtn.dataset.projectindex = +projectIndex;

      rightSide.appendChild(detailsBtn);
      rightSide.appendChild(dueDateText);
      rightSide.appendChild(editBtn);
      rightSide.appendChild(deleteTaskBtn);

      mainTile.appendChild(h1Title);
      mainTile.appendChild(rightSide);

      colorTile.appendChild(mainTile);
      contentContainer.appendChild(colorTile);
    });
  }
  function VerifyAddingTask(e) {
    e.preventDefault();
    const taskTitle = document.querySelector('#taskName').value;
    const taskDesc = document.querySelector('#descriptionBox').value;
    let taskDueDate = document.querySelector('#dueDate').value;
    const taskPriority = document.querySelector('#priority').value;
    const activeProjectIndex = getActiveProjectIndex(activeProject);

    const date = new Date(taskDueDate.replace(/-/g, '/'))
    taskDueDate = format(new Date(date), 'M/dd/yyyy');


    addTaskToProject({ title: taskTitle, desc: taskDesc, dueDate: taskDueDate, priority: taskPriority }, activeProjectIndex);
    toggleAddTaskOverlay();

  }

  function showTaskDetails(taskIndex, currentProjectIndex) {
    const activeProjectIndex = currentProjectIndex;
    const currentTask = allProjects[activeProjectIndex].tasks[taskIndex];
    let overlayInfoSection = document.querySelector('.infoSection');
    console.log(currentTask.title);

    overlayInfoSection.replaceChildren(); //clear contents of the info section

    const h2ProjectTitle = document.createElement('h2');
    h2ProjectTitle.textContent = `Project: '${allProjects[activeProjectIndex].getTitle()}'`;
    const infoContainer = document.createElement('div');
    infoContainer.classList.add('info-container');

    const table = document.createElement('table');
    const tableRow = document.createElement('tr');
    const tableHeaderProp = document.createElement('th');
    tableHeaderProp.textContent = 'Property';
    const tableHeaderVal = document.createElement('th');
    tableHeaderVal.textContent = 'Value';

    tableRow.appendChild(tableHeaderProp);
    tableRow.appendChild(tableHeaderVal);
    table.appendChild(tableRow);
    for (let i = 0; i < Object.keys(currentTask).length; i++) {
      const tableRowTemp = document.createElement('tr');

      const tableDataProp = document.createElement('td');
      if (Object.keys(currentTask)[i].includes('get') || Object.keys(currentTask)[i].includes('set')) {
        continue;
      }
      tableDataProp.textContent = Object.keys(currentTask)[i]
      const tableDataVal = document.createElement('td');
      tableDataVal.textContent = Object.values(currentTask)[i]

      tableRowTemp.appendChild(tableDataProp);
      tableRowTemp.appendChild(tableDataVal);

      table.appendChild(tableRowTemp);

    }
    infoContainer.appendChild(table);

    overlayInfoSection.appendChild(h2ProjectTitle);
    overlayInfoSection.appendChild(infoContainer);

    toggleTemplateOverlay();
  }

  function deleteTaskFromProject(taskIndex, projectIndex) {
    const currentProjectIndex = projectIndex;

    console.log('task to delete->', allProjects[currentProjectIndex].tasks[taskIndex])
    allProjects[currentProjectIndex].tasks.splice(taskIndex, 1);
    console.log('current all Projects: ', allProjects);
    pubSub.publish('editProjectTask');
  }


  function addTaskToProject({ title, desc, dueDate, priority }, projectIndex) {
    // allProjects[projectIndex].tasks.push({ title, desc, dueDate, priority });
    allProjects[projectIndex].addTask({ title, desc, dueDate, priority });
    console.log('allProjects', allProjects);
  }
  function addToProjectList(projObj) {
    const projectTitle = projObj.title;
    const projectBtn = document.createElement('div');
    projectBtn.classList.add('btn');
    projectBtn.classList.add('project-btn');
    projectBtn.dataset.projectname = projectTitle;
    projectBtn.textContent = projectTitle;
    console.log('added to projectList:, ', projObj.title);

    projectList.appendChild(projectBtn);
    allProjects.push(projObj);
  }
  function displayError(msg) {
    errorMsg.textContent = msg;

    setTimeout(function () {
      errorMsg.textContent = '';
    }, 4000)
  }
  function loadContent(index) {
    let currentProject = allProjects[index];
    activeProject = currentProject.getTitle();
    contentContainer.replaceChildren();
    if (!currentProject.tasks.length) {
      const noTaskPara = document.createElement('p')
      noTaskPara.textContent = 'No tasks :('
      contentContainer.appendChild(noTaskPara);

    }
    displayContent(currentProject.tasks);
  }
  function displayContent(taskArr) {

    const taskContent = document.createElement('div');
    taskContent.classList.add('taskContent');

    // const projectTitle = document.createElement('h2');
    // projectTitle.textContent = activeProject;

    const addTaskBtn = document.createElement('div')
    addTaskBtn.classList.add('btn')
    addTaskBtn.id = 'addTaskBtn';
    addTaskBtn.classList.add('addTaskBtn');
    addTaskBtn.dataset.projectindex = getActiveProjectIndex(activeProject);
    addTaskBtn.textContent = "Add a Task"

    // taskContent.appendChild(projectTitle);
    taskContent.appendChild(addTaskBtn);
    contentContainer.appendChild(taskContent);

    taskArr.forEach((task, i) => {
      const colorTile = document.createElement('div');
      colorTile.classList.add('color-tile', 'priority-' + task.priority);

      const mainTile = document.createElement('div');
      mainTile.classList.add('main-tile');

      const h1Title = document.createElement('h1')
      h1Title.textContent = task.getTitle();

      const rightSide = document.createElement('div')
      rightSide.classList.add('right-side')

      const detailsBtn = document.createElement('div')
      detailsBtn.classList.add('btn', 'taskDetailsBtn')
      detailsBtn.textContent = 'Details';
      detailsBtn.dataset.taskindex = +i;
      detailsBtn.dataset.projectindex = getActiveProjectIndex(activeProject);

      const dueDateText = document.createElement('h3');
      dueDateText.textContent = task.getDueDate();

      const editBtn = document.createElement('div');
      editBtn.classList.add('btn');
      editBtn.textContent = 'Edit';
      editBtn.dataset.taskindex = i;
      detailsBtn.dataset.projectindex = getActiveProjectIndex(activeProject);

      const deleteTaskBtn = document.createElement('div');
      deleteTaskBtn.classList.add('btn', 'taskDeleteBtn');
      deleteTaskBtn.textContent = 'Delete';
      deleteTaskBtn.dataset.taskindex = i;
      detailsBtn.dataset.projectindex = getActiveProjectIndex(activeProject);

      rightSide.appendChild(detailsBtn);
      rightSide.appendChild(dueDateText);
      rightSide.appendChild(editBtn);
      rightSide.appendChild(deleteTaskBtn);

      mainTile.appendChild(h1Title);
      mainTile.appendChild(rightSide);

      colorTile.appendChild(mainTile);
      contentContainer.appendChild(colorTile);
    })
  }

  function changeMainContent(e) {
    history = '';
    activeProject = e.target.dataset.projectname;
    let activeProjectIndex = getActiveProjectIndex(activeProject);


    console.log('activeProject', activeProject);

    loadContent(activeProjectIndex);
  }
  function getActiveProjectIndex(title) {
    let index;
    allProjects.forEach((project, projIndex) => {
      if (project.getTitle() === title) {
        index = projIndex;
      }
    });
    return index;
  }
  return { changeMainContent };

})();

export default domController;